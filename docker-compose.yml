version: '3.8'

services:
  # n8n Automation Engine
  n8n:
    image: n8nio/n8n:latest
    container_name: fraudshield-n8n
    ports:
      - "5678:5678"
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=fraudshield123
      - WEBHOOK_URL=http://localhost:5678
      - N8N_HOST=0.0.0.0
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - NODE_ENV=production
      - EXECUTIONS_PROCESS=main
      - EXECUTIONS_MODE=regular
      - QUEUE_BULL_REDIS_HOST=redis
      - QUEUE_BULL_REDIS_PORT=6379
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_PORT=5432
      - DB_POSTGRESDB_DATABASE=n8n
      - DB_POSTGRESDB_USER=n8n_user
      - DB_POSTGRESDB_PASSWORD=n8n_password
    volumes:
      - n8n_data:/home/node/.n8n
      - ./automation/n8n/workflows:/home/node/workflows
      - ./automation/n8n/credentials:/home/node/credentials
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: fraudshield-postgres
    environment:
      - POSTGRES_DB=fraudshield
      - POSTGRES_USER=fraud_user
      - POSTGRES_PASSWORD=secure_password_123
      - POSTGRES_MULTIPLE_DATABASES=n8n,analytics,ml_models
      - POSTGRES_USER_N8N=n8n_user
      - POSTGRES_PASSWORD_N8N=n8n_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initd.b/
      - ./database/backups:/backups
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fraud_user -d fraudshield"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache & Queue
  redis:
    image: redis:7-alpine
    container_name: fraudshield-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./database/redis.conf:/etc/redis/redis.conf
    command: redis-server /etc/redis/redis.conf
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Frontend (Next.js)
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    container_name: fraudshield-frontend
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_EDGE_URL=https://fraud-detection.your-domain.workers.dev
      - NEXT_PUBLIC_WEBSOCKET_URL=ws://localhost:8001
      - NODE_ENV=development
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    restart: unless-stopped

  # Backend API (Deno)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: fraudshield-backend
    ports:
      - "8000:8000"
      - "8001:8001"  # WebSocket
    environment:
      - DATABASE_URL=postgresql://fraud_user:secure_password_123@postgres:5432/fraudshield
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your_super_secure_jwt_secret_key_here
      - N8N_WEBHOOK_URL=http://n8n:5678/webhook
      - SUPABASE_URL=https://your-project.supabase.co
      - SUPABASE_ANON_KEY=your_supabase_anon_key
      - OPENAI_API_KEY=your_openai_key_for_llm
      - HUGGINGFACE_API_KEY=your_huggingface_key
    volumes:
      - ./backend:/app
      - ml_models:/app/models
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ML Training Service
  ml-trainer:
    build:
      context: ./ml-trainer
      dockerfile: Dockerfile
    container_name: fraudshield-ml-trainer
    environment:
      - DATABASE_URL=postgresql://fraud_user:secure_password_123@postgres:5432/fraudshield
      - REDIS_URL=redis://redis:6379
      - MODEL_STORAGE_PATH=/app/models
      - TRAINING_SCHEDULE=0 2 * * *  # Daily at 2 AM
      - HUGGINGFACE_API_KEY=your_huggingface_key
      - WANDB_API_KEY=your_wandb_key_for_tracking
    volumes:
      - ml_models:/app/models
      - ./ml-trainer:/app
      - ./data:/app/data
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

  # Community Intelligence P2P Node
  community-node:
    build:
      context: ./community
      dockerfile: Dockerfile
    container_name: fraudshield-community
    ports:
      - "9000:9000"  # P2P Network
      - "9001:9001"  # API
    environment:
      - NODE_ENV=production
      - P2P_PORT=9000
      - API_PORT=9001
      - BOOTSTRAP_PEERS=/ip4/bootstrap1.fraudshield.community/tcp/9000,/ip4/bootstrap2.fraudshield.community/tcp/9000
      - ENCRYPTION_KEY=your_community_encryption_key
    volumes:
      - community_data:/app/data
    restart: unless-stopped

  # Monitoring & Analytics (Grafana)
  grafana:
    image: grafana/grafana:latest
    container_name: fraudshield-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=fraudshield123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - postgres
    restart: unless-stopped

  # Prometheus (Metrics Collection)
  prometheus:
    image: prom/prometheus:latest
    container_name: fraudshield-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Alert Manager
  alertmanager:
    image: prom/alertmanager:latest
    container_name: fraudshield-alertmanager
    ports:
      - "9093:9093"
    volumes:
      - ./monitoring/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: fraudshield-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
      - grafana
    restart: unless-stopped

volumes:
  n8n_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  ml_models:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local
  community_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  default:
    name: fraudshield-network
    driver: bridge